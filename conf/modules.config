
/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GEN_FASTQ_SAMPLESHEET' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Genome ref
//

//
// Sample demultiplexing
//
if (!params.fastq_dir) {
    process {
        withName: 'ILLUMINA_GEN_SAMPLESHEET' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }

        withName: 'ILLUMINA_BCL2FASTQ' {
            ext.args   = [
                '--create-fastq-for-index-reads',
                '--no-lane-splitting',
                '--ignore-missing-positions',
                '--ignore-missing-controls',
                '--ignore-missing-filter',
                '--ignore-missing-bcls',
                "--barcode-mismatches=${params.max_barcode_mismatches}",
                "--minimum-trimmed-read-length=${params.min_index_length}",
                "--mask-short-adapter-reads=${params.min_index_length}",
                "--use-bases-mask=${params.base_mask}"
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/01_sample_demultiplex" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_bcl_conversion
            ]
        }
    }
}

//
// Cell barcode demultiplexing
//
process {
    withName: 'DEMUX_INDEX_READS' {
        publishDir = [
            path: { "${params.outdir}/02_barcode_demux" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DEMUX_FILTER_NOISE' {
        publishDir = [
            path: { "${params.outdir}/03_barcode_filter" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'DEMUX_FILTER_READS' {
        publishDir = [
            path: { "${params.outdir}/04_read_filter" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}


//
// Read QC and trimming options
//
process {
    withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
        ext.args   = '--quiet'
    }

    withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
        ext.args   = [
            '--fastqc',
            params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
        ].join(' ').trim()
        publishDir = [
            [
                path: { "${params.outdir}/05_trimgalore/fastqc" },
                mode: 'copy',
                pattern: "*.{html,zip}"
            ],
            [
                path: { "${params.outdir}/05_trimgalore" },
                mode: 'copy',
                pattern: "*.fq.gz",
                enabled: params.save_trimmed
            ],
            [
                path: { "${params.outdir}/05_trimgalore" },
                mode: 'copy',
                pattern: "*.txt"
            ]
        ]
    }
}

//
// Chromap
//
process {
    withName: 'CHROMAP_INDEX' {
        cpus   = { check_max( 1     * task.attempt, 'cpus'    ) }
        memory = { check_max( 32.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
        ext.args   = [
            "-k ${params.chromap_index_kmer}",
            "-w ${params.chromap_index_winsize}"
        ].join(' ').trim()
        publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_index
        ]
    }

    withName: 'CHROMAP_ALIGN' {
        cpus   = { check_max( 12     * task.attempt, 'cpus'    ) }
        memory = { check_max( 64.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 24.h   * task.attempt, 'time'    ) }
        ext.args   = [
            "-l ${params.chromap_max_insert_size}",
            "--bc-error-threshold ${params.chromap_bc_correction_distance}",
            "--bc-probability-threshold ${params.chromap_bc_correction_prob}",
            "--remove-pcr-duplicates",
            "--remove-pcr-duplicates-at-cell-level",
            "--low-mem",
            "--Tn5-shift",
            "--BED"
        ].join(' ').trim()
        publishDir = [
                path: { "${params.outdir}/06_align/chromap" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_index
        ]
    }

    // withName: 'CHROMAP_ALIGN' {
    //     cpus   = { check_max( 12     * task.attempt, 'cpus'    ) }
    //     memory = { check_max( 128.GB * task.attempt, 'memory'  ) }
    //     time   = { check_max( 24.h   * task.attempt, 'time'    ) }
    //     ext.args   = '--preset atac'
    //     publishDir = [
    //             path: { "${params.outdir}/06_align/chromap" },
    //             mode: 'copy',
    //             saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
    //             enabled: params.save_index
    //     ]
    // }
}