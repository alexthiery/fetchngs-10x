/*
========================================================================================
    luslab/scmultiomic Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

/*
*** Flow switching and result output ***
There are three keywords for controling program flow and results output:
    - save_* - Specifies whether to save information to output
    - skip_* - Specifies whether to skip a process of group of processes
    - only_* - Only run the pipeline up to this point
*/

// Global default params, used in configs
params {
    // Input
    sample_sheet               = null

    // Boilerplate options
    outdir                     = "./results"
    multiqc_config             = null
    multiqc_title              = null
    email                      = null
    email_on_fail              = null
    max_multiqc_email_size     = "25.MB"
    plaintext_email            = false
    monochrome_logs            = false
    help                       = false
    tracedir                   = "${params.outdir}/pipeline_info"
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = "master"
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_name        = null
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    max_memory                 = "128.GB"
    max_cpus                   = 16
    max_time                   = "240.h"
}

// Load base.config by default for all pipelines
includeConfig "conf/base.config"

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }
    docker {
        docker.enabled         = true
        // Avoid this error:
        //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
        // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
        // once this is established and works well, nextflow might implement this behavior as new default.
        docker.runOptions      = "-u \$(id -u):\$(id -g)"
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    crick       { includeConfig "./conf/crick.config"   }
    local       { includeConfig "conf/local.config"     } // Sets up compute resources for local computing run
    test        { includeConfig "conf/test.config"      }
}

// // Export these variables to prevent local Python/R libraries from conflicting with those in the container
// // The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// // See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

// env {
//     PYTHONNOUSERSITE = 1
//     R_PROFILE_USER   = "/.Rprofile"
//     R_ENVIRON_USER   = "/.Renviron"
//     JULIA_DEPOT_PATH = "/usr/local/share/julia"
// }

// // Capture exit codes from upstream processes when piping
// process.shell = ["/bin/bash", "-euo", "pipefail"]

// env {
//     PYTHONPATH = "/Users/cheshic/dev/repos/luslab/cheshic-nf-multi-omic/bin/lib"
// }

// def trace_timestamp = new java.util.Date().format( "yyyy-MM-dd_HH-mm-ss")
// timeline {
//     enabled = true
//     file = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
// }
// report {
//     enabled = true
//     file = "${params.tracedir}/execution_report_${trace_timestamp}.html"
// }
// trace {
//     enabled = true
//     file = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
//     fields = "task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,cpus,time,memory,%cpu,peak_rss,peak_vmem,rchar,wchar"
// }
// dag {
//     enabled = true
//     file = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
// }

// manifest {
//     name            = 'luslab/scmultiomic'
//     author          = 'TODO'
//     homePage        = 'TODO'
//     description     = 'TODO'
//     mainScript      = 'main.nf'
//     nextflowVersion = '!>=21.10.3'
//     version         = '1.0.0'
// }

// // Load modules.config for DSL2 module specific options
// includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "time") {
        try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "cpus") {
        try {
        return Math.min( obj, params.max_cpus as int )
        } catch (all) {
        println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
        }
    }
}
